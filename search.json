[{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"bayesian-transmission","text":"package provides Bayesian framework transmission modeling individual patient level. Modeling conducted Markov Chain Monte Carlo (MCMC) methods.document explain basic usage package, specification parameters, output model.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"data-structure","dir":"Articles","previous_headings":"","what":"Data Structure","title":"bayesian-transmission","text":"algorithms expect longitudinal data set following columns: * facility: facility event occurred. * unit: unit within facility event occurred. * time: time event occurred. * patient: patient involved event. * type: type event. package includes simulated dataset, simulated.data. 12 different types events can specified type column. , expected numerical codes shown parentheses: Admission (0) Discharge (3) Negative Test (1) Positive Test (2) Negative Test (4) Positive Test (5) Negative Test (7) Positive Test (8) single dose (9) Start (10) Stop (11) Start (6) Stop (7) events need used every data set, model selected reflect data available. Care taken correctly code data. EventToCode CodeToEvent functions can used convert .","code":"pillar::glimpse(simulated.data) #> Rows: 8,360 #> Columns: 5 #> $ facility <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ unit     <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ time     <dbl> 0.060978, 0.061978, 1.560978, 2.883323, 2.884323, 1.422631, 1… #> $ patient  <int> 1, 1, 1, 1, 1, 10, 10, 10, 10, 19, 19, 19, 23, 23, 23, 28, 28… #> $ type     <int> 0, 1, 10, 1, 3, 0, 1, 1, 3, 0, 1, 3, 0, 1, 3, 0, 1, 1, 3, 0, … table(CodeToEvent(simulated.data$type)) #>  #>      abxoff       abxon   admission   discharge negsurvtest possurvtest  #>         297         725        2183        2183        2749         223"},{"path":[]},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"model-choice","dir":"Articles","previous_headings":"Model Specifiction","what":"Model Choice","title":"bayesian-transmission","text":"Since model implemented C++ speed efficiency, specified models can used. currently implemented models : \"LinearAbxModel\", Linear model antibiotic use covariate. \"MixedModel\", \"LogNormalModel\" Model specification parameters controlled constructor functions name, generically LogNormalModelParams() function. models choice either 2 state (susceptible colonized) 3 state (susceptible, colonized, recovered latent) model. Number states set nstates parameter, number states model overrides may specified individual component.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"parameters","dir":"Articles","previous_headings":"Model Specifiction","what":"Parameters","title":"bayesian-transmission","text":"remainder parameters grouped following categories: Abx, Antibiotic use, AbxRate, Antibiotic rates, InUnit, unit infection rates, OutOfUnitInfection, unit infection rates, Insitu, situ parameters, SurveilenceTest, Surveillance testing, ClinicalTest, Clinical testing. Unless otherwise specified parameters distributed gamma specified shape rate parameters. parameter can also left fixed sampled iteration MCMC.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"specifying-parameters","dir":"Articles","previous_headings":"Model Specifiction > Parameters","what":"Specifying parameters","title":"bayesian-transmission","text":"Parameters model may specified Param() function. function takes four arguments:","code":"1. `init`, is the initial value of the parameter. 2. `weight`, is the weight of the prior distribution in updates. 3. `update`, a flag of if the parameter should be sampled in the MCMC algorithm.      `FALSE` indicates that the parameter should be fixed, and is by default `TRUE` when `weight` is greater than zero. 4. `prior`, the mean of the prior distribution.  Taken with the weight will fully parameterize the distribution. # Fully specified parameter. Param(init = 0, weight = 1, update = TRUE, prior = 0.5) # Fixed parameter # Weight = 0 implies update=FALSE and prior is ignored. Param(0, 0) # Update parameter that starts at zero. Param(0, weight =1, update=TRUE) # Parameters specified at zero implies fixed. Param(0)"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"abx-antibiotic-use","dir":"Articles","previous_headings":"Model Specifiction","what":"Abx Antibiotic use","title":"bayesian-transmission","text":"Antibiotic use specified Abx parameter. parameter list constructed AbxParams() function following components: onoff, antibiotics used . two following parameters used onoff TRUE. delay, delay antibiotic take effect. life, duration antibiotic effective. Currently, antibiotics assumed equally effective duration effectiveness.","code":"abx <- AbxParams(onoff = TRUE, delay = 0.3, life = 1)"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"abxrate-antibiotic-rates","dir":"Articles","previous_headings":"Model Specifiction","what":"AbxRate Antibiotic rates","title":"bayesian-transmission","text":"AbxRate parameter control antibiotic administration rates. since parameters non-zero updated. rate zero either indicate group never antibiotics.","code":"abxrate <- AbxRateParams(   # Uncolonized patients do use antibiotics but at a low rate.   uncolonized = 0.05,     # Colonized patients use antibiotics at a high rate.   colonized = 0.7       )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"inunit-in-unit-infection-rate","dir":"Articles","previous_headings":"Model Specifiction","what":"InUnit In unit infection rate","title":"bayesian-transmission","text":"Transmission within unit main defining characteristic differentiates models. example linear antibiotic model, LinearAbxModel(), differentiated log normal model, LogNormalModelParams() use ABXInUnitParams() InUnit argument rather LogNormalInUnitAcquisition() take account antibiotic use. unit transmission defined terms acquisition, progression, clearance.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"aqcuisition-model","dir":"Articles","previous_headings":"Model Specifiction > InUnit In unit infection rate","what":"Aqcuisition Model","title":"bayesian-transmission","text":"base log normal antibiotic model, LogNormalABXInUnitParameters() log acquisition probability linear function. log(P(Acq(t)))=β0+βt(t−t0)+βcNog(Colonized(t))acaNca(t)+βAAi(t)+βEEi(t) \\log(P(\\mathrm{Acq(t)})) = \\beta_0 + \\beta_t(t-t_0) +      \\beta_c N_og(\\mathrm{Colonized(t)})a_{ca}N_{ca}(t) + \\beta_A A_i(t) + \\beta_E E_i(t)  β⋆\\beta_\\star represents coefficient corresponding amounts, Nc(t)N_c(t) represent total number colonized patients time tt, Nca(t)N_{ca}(t) number colonized antibiotics, Ai(t)A_i(t) Ei(t)E_i(t) represents patient ii currently ever antibiotics. linear antibiotic (LinearAbxAcquisitionParams) takes complicated form acquisition model. $$ P(\\mathrm{Acq(t)}) =   \\left[e^{\\beta_\\mathrm{time}(t-t_0)}\\right]\\\\   \\left\\{e^{\\beta_0}          \\left[             \\left(\\frac{\\beta_\\mathrm{freq}}{P(t)}+(1 - e^{\\beta_\\mathrm{freq}})\\right)             e^{\\beta_\\mathrm{mass}}\\left(                 (N_c(t) - N_{ca}(t)) + e^{\\beta_\\mathrm{col\\_abx}}N_{ca}(t)             \\right)           + 1 - e^{\\beta_\\mathrm{mass}}         \\right]   \\right\\}\\\\   \\left[     N_S(t) - N_E(t) + e^{\\beta_\\mathrm{suss\\_ever}}\\left(\\left(E_i(t)-A_i(t)\\right) +A_i(t)e^{\\beta_\\mathrm{suss\\_abx}}\\right)   \\right] $$","code":"acquisition <- LinearAbxAcquisitionParams(     base = Param(0.01),     #< Base acquisition rate (Updated)     time = Param(1, 0),     #< Time effect (Fixed)     mass = Param(1),        #< Mass Mixing (Updated)     freq = Param(1),        #< Frequency/Density effect (Updated)     col_abx = Param(1, 0),  #< Colonized on antibiotics (Fixed)     suss_abx = Param(1, 0), #< Susceptible on antibiotics (Fixed)     suss_ever = Param(1, 0) #< Ever on antibiotics (Fixed)   )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"progression-model","dir":"Articles","previous_headings":"Model Specifiction > InUnit In unit infection rate","what":"Progression Model","title":"bayesian-transmission","text":"3 state model latent state progression model controls patient transition latent state. base rate can affected currently antiboitics ever antbiotcs. log(P(progression))=δ0+δAAi(t)+δEEi(t) \\log(P(\\mathrm{progression})) = \\delta_0+\\delta_AA_i(t) + \\delta_EE_i(t)  linear antibiotic model : P(progression)=eδ0[1−Ei(t)+eδ2(Ei(t)−Ai(t)+eδ1Ai(t))] P(\\mathrm{progression}) = e^{\\delta_0}\\left[1-E_i(t)+e^{\\delta_2}\\left(E_i(t)-A_i(t)+e^{\\delta_1}A_i(t)\\right)\\right] use δ\\delta coefficients, notation .","code":"progression <- ProgressionParams(     rate = Param(0.01),     #< Base progression rate (Updated)     abx  = Param(1, 0),     #< Currently on antibiotics (Fixed)     ever = Param(1, 0)      #< Ever on antibiotics (Fixed) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"clearance-model","dir":"Articles","previous_headings":"Model Specifiction > InUnit In unit infection rate","what":"Clearance Model","title":"bayesian-transmission","text":"clearance model progression model log normal linear cases, coefficients however independent.","code":"clearance <- ClearanceParams(     rate = Param(0.01),     #< Base clearance rate (Updated)     abx  = Param(1, 0),     #< Currently on antibiotics (Fixed)     ever = Param(1, 0)      #< Ever on antibiotics (Fixed) ) inunit <- ABXInUnitParams(   acquisition = acquisition,   progression = progression,   clearance   = clearance )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"out-of-unit-importation","dir":"Articles","previous_headings":"Model Specifiction","what":"Out of Unit Importation","title":"bayesian-transmission","text":"unit parameters control rate admissions come , state enter . log(P(statei→statej)|t)=Pj−Qi,je−t∑iri \\log(P(\\mathrm{state}_i \\rightarrow \\mathrm{state}_j)|t) = P_j - Q_{,j} e^{-t \\sum_i r_i}","code":"outcol <- OutOfUnitInfectionParams(   acquisition = 0.1,   clearance = 0.5 )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"in-situ","dir":"Articles","previous_headings":"Model Specifiction","what":"In Situ","title":"bayesian-transmission","text":"’m sure parameters . ’s set gamma distributed parameters one state. updates probabilities time dependent. updating rates state sampled gamma(Ni,1)gamma(N_i, 1) distribution. three normalized sum 1.","code":"insitu <- InsituParams(   # Starting 90/10 split uncolonized to colonized     probs = c(uncolonized = 0.90, #< names are unnecessary.               colonized = 0.10) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"testing","dir":"Articles","previous_headings":"Model Specifiction","what":"Testing","title":"bayesian-transmission","text":"two types testing, surveillance, conducted routinely regular intervals admission every 3 days , clinical, testing precipitated staff, thus timing informative.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"surveillance-testing","dir":"Articles","previous_headings":"Model Specifiction > Testing","what":"Surveillance Testing","title":"bayesian-transmission","text":"timing surveillance testing assumed informative. Therefore, surveillance testing parameterized terms probability positive test given underlying status. Surveillance test parameters updated sample Beta(Ns,1,Ns,0)Beta(N_{s,1}, N_{s,0}) distribution Ns,1N_{s,1} Ns,0N_{s,0} number positive negative tests respectively state ss.","code":"surv <- SurveillanceTestParams(     # Probability of a positive test when uncolonized     uncolonized = Param(0),     # Probability of a positive test when colonized     colonized = Param(0.9, 1, TRUE) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"clinical-testing","dir":"Articles","previous_headings":"Model Specifiction > Testing","what":"Clinical Testing","title":"bayesian-transmission","text":"Since clinical testing time informative, clinical testing assumed random within infection stage. rate testing within stage sampled gamma distribution. Sensitivity/Specificity handled surveillance testing likelihood multiplicative rate effectiveness.","code":"clin <- ClinicalTestParams(     # Rate of testing when uncolonized     uncolonized = ParamWRate(Param(0, 0), rate = Param(1)),     # Rate of testing when colonized     colonized = ParamWRate(Param(0, 0), rate = Param(1)) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"all-together","dir":"Articles","previous_headings":"Model Specifiction > Testing","what":"All Together","title":"bayesian-transmission","text":"","code":"params <- LinearAbxModel(   nstates = 2,   Insitu = insitu,   SurveillanceTest = surv,   ClinicalTest = clin,   OutOfUnitInfection = outcol,   InUnit = inunit,   Abx = abx,   AbxRate = abxrate )"},{"path":"https://epiforesite.github.io/bayesian-transmission/articles/bayesian-transmission.html","id":"running-the-model","dir":"Articles","previous_headings":"","what":"Running the Model","title":"bayesian-transmission","text":"model run runMCMC() function. function takes following arguments:","code":"results <- runMCMC(   data = simulated.data,   MCMCParameters = list(     nburn = 0,     nsims = 100,     outputparam = TRUE,     outputfinal = TRUE   ),   modelParameters = params,   verbose = TRUE ) #> Initializing Variables #> Creating RNG...Done #> Setting up System...Done #> Creating model... #> (In LinearAbxModel specialization) #>   * Setting up Abx...Done #>   * Setting up Insitu... #> DEBUG InsituParams: probs=[0.9, 0.1, 0] #> Done #>   * Setting up Surveillance Test...Done #>   * Setting up Clinical Test...Done #>   * Setting up Out of Unit...Done #>   * Setting up In Unit...Done #>   * Setting up Abx Rates...Done #> Done #> Set time origin #> Building history structure...Done #> Finding tests for WAIC. #> Building sampler. #>  #> === INITIAL PARAMETERS === #> 0.9000000000 0.0000000000    0.0000000000    0.8000000000    0.0000000000    0.8000000000    0.0000000000    0.0000000000    1.0000000000    0.0000000000    0.1000000000    0.5000000000    0.0100000000    1.0000000000    0.9999999999    0.9999999999    1.0000000000    1.0000000000    1.0000000000    0.0100000000    1.0000000000    1.0000000000    0.0500000000    0.7000000000            LogLike=-inf #> === END INITIAL PARAMETERS === #> burning in MCMC. #> Running MCMC. #> 0:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 1:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 2:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 3:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 4:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 5:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 6:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 7:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 8:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 9:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 10:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 11:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 12:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 13:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 14:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 15:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 16:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 17:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 18:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 19:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 20:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 21:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 22:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 23:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 24:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 25:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 26:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 27:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 28:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 29:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 30:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 31:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 32:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 33:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 34:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 35:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 36:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 37:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 38:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 39:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 40:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 41:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 42:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 43:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 44:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 45:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 46:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 47:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 48:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 49:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 50:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 51:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 52:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 53:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 54:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 55:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 56:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 57:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 58:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 59:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 60:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 61:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 62:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 63:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 64:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 65:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 66:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 67:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 68:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 69:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 70:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 71:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 72:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 73:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 74:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 75:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 76:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 77:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 78:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 79:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 80:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 81:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 82:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 83:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 84:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 85:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 86:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 87:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 88:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 89:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 90:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 91:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 92:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 93:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 94:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 95:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 96:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 97:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 98:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> 99:sample episodes...Sample Model...Outputting parameters...likelhood...done. #> MCMC done. #> WAIC 1 2 =   -9.47241    9.48992 #> Writing complete form of final state."},{"path":"https://epiforesite.github.io/bayesian-transmission/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Andrew Redd. Author, maintainer. CDC's Center Forecasting Outbreak Analytics. Funder.           project made possible cooperative agreement CDC-RFA-FT-23-0069 (grant # NU38FT000009-01-00) CDC's Center Forecasting Outbreak Analytics. contents solely responsibility authors necessarily represent official views Centers Disease Control Prevention.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Redd (2025). bayestransmission: Bayesian Transmission Models. R package version 0.0.0.9000, https://epiforesite.github.io/bayesian-transmission/.","code":"@Manual{,   title = {bayestransmission: Bayesian Transmission Models},   author = {Andrew Redd},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://epiforesite.github.io/bayesian-transmission/}, }"},{"path":[]},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"summary-of-fixes","dir":"","previous_headings":"","what":"Summary of Fixes","title":"Parameter Initialization Comparison - Final Results","text":"successfully fixed 4 critical bugs R package parameter initialization:","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"id_1--insituparams-index-mapping-bug","dir":"","previous_headings":"Summary of Fixes","what":"1. ✅ InsituParams Index Mapping Bug","title":"Parameter Initialization Comparison - Final Results","text":"Problem: 2-state models use indices [0, 1, 2] [uncolonized, latent, colonized], output skips index 1 Fix: Changed R test probs = c(0.9, 0.1, 0) probs = c(0.9, 0, 0.1) put colonized value index 2 Result: Insitu.Pcol now correctly shows 0.1 instead 0.0","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"id_2--randomtestparamswrite-bug","dir":"","previous_headings":"Summary of Fixes","what":"2. ✅ RandomTestParams::write() Bug","title":"Parameter Initialization Comparison - Final Results","text":"Problem: RandomTestParams::write() calling TestParams::write(os) output parent class’s surveillance test probabilities instead clinical random test probabilities Fix: Modified /home/bt/src/models_RandomTestParams.cpp output probs[] values directly File: src/models_RandomTestParams.cpp line 197-223 Result: Clinical test parameters now correctly show 0.5/0.5 probabilities 1.0/1.0 rates","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"id_3--linearabxicp-double-transformation-bug","dir":"","previous_headings":"Summary of Fixes","what":"3. ✅ LinearAbxICP Double Transformation Bug","title":"Parameter Initialization Comparison - Final Results","text":"Problem: setupLinearAbxAcquisitionModel() passing dolog=true setParam(), take log(value) passing LinearAbxICP::set(), method ALREADY applies log/logit transformations internally, causing double transformation (log(log(value))) Fix: Removed dolog=true parameter LinearAbx acquisition parameter setups src/modelsetup.h File: src/modelsetup.h line 177-190 Result: LABX parameters now show correct values (1.0 instead 0.0)","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"id_4--abxrateparams-index-mapping-bug","dir":"","previous_headings":"Summary of Fixes","what":"4. ✅ AbxRateParams Index Mapping Bug","title":"Parameter Initialization Comparison - Final Results","text":"Problem: setupAbxRateParams() setting index 1 colonized, AbxParams uses indices [0, 1, 2] = [uncolonized, latent, colonized] index 1 latent (unused 2-state) Fix: Changed setup use correct index mapping: colonized index 2, index 1 File: src/modelsetup.h line 227-235 Result: Abx.rateCol now correctly shows 1.0 instead 0.0","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"final-parameter-comparison","dir":"","previous_headings":"","what":"Final Parameter Comparison","title":"Parameter Initialization Comparison - Final Results","text":"Footnotes: 1. LABX.mass.mx LABX.freq.mx show 0.9999 instead 1.0 use logit transformation, logit(1.0) = infinity. value 0.9999 effectively equivalent 1.0 practice (logit(0.9999) ≈ 9.21).","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"progress-summary","dir":"","previous_headings":"","what":"Progress Summary","title":"Parameter Initialization Comparison - Final Results","text":"Initial State: 5/22 parameters matching (23%) - Insitu: 1/2 matching (50%) - SurveillanceTest: 2/2 matching (100%) - RandomTest: 0/4 matching (0%) - OutCol: 2/2 matching (100%) - LABX: 0/13 matching (0%) - Abx: 0/2 matching (0%) InsituParams Fix: 8/22 parameters matching (36%) - Insitu: 2/2 matching (100%) ✅ RandomTestParams Fix: 12/22 parameters matching (55%) - RandomTest: 4/4 matching (100%) ✅ LinearAbxICP & AbxParams Fixes: 22/22 parameters matching (100%) ✅✅✅ - LABX: 13/13 matching (100%) ✅ - Abx: 2/2 matching (100%) ✅","code":""},{"path":[]},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"index-mapping-for-2-state-models","dir":"","previous_headings":"Technical Details","what":"Index Mapping for 2-State Models","title":"Parameter Initialization Comparison - Final Results","text":"Many parameter classes use indices [0, 1, 2] [uncolonized, latent, colonized]: - InsituParams: Output skips index 1, writes probs[0] probs[2] - TestParams: Output skips index 1, writes probs[0][1] probs[2][1] - RandomTestParams: Output skips index 1, writes probs[0][1], probs[2][1], rates[0], rates[2] - AbxParams: Output skips index 1, writes rates[0] rates[2] specifying parameters R 2-state models, colonized values must placed index 2 (third position), index 1.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"parameter-transformations-in-linearabxicp","dir":"","previous_headings":"Technical Details","what":"Parameter Transformations in LinearAbxICP","title":"Parameter Initialization Comparison - Final Results","text":"LinearAbxICP::set(, j, value, …) applies transformations internally: - =0 (acquisition), j=0,4,5,6: Log transform → par[][j] = log(value), epar[][j] = exp(par[][j]) = value - =0 (acquisition), j=1: Log transform tolerance - =0 (acquisition), j=2,3: Logit transform → par[][j] = logit(value), epar[][j] = logistic(par[][j]) = value - =1,2 (progression/clearance): Log transform setParam() function modelsetup.h use dolog=true LinearAbxICP parameters, cause double transformation.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"surveillance-test-abx-mode","dir":"","previous_headings":"Technical Details","what":"Surveillance Test ABX Mode","title":"Parameter Initialization Comparison - Final Results","text":"R package creates LogNormalModel abxtest=1 (uses antibiotics surveillance test), C++ uses abxtest=0. causes R output 4 surveillance test values (/without ABX) vs 2 C++, creating 2-position offset parameter arrays.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"files-modified","dir":"","previous_headings":"","what":"Files Modified","title":"Parameter Initialization Comparison - Final Results","text":"Fixed write() method output probs instead calling parent TestParams::write() Line 177-190: Removed dolog=true LinearAbx acquisition parameter setup Line 227-235: Fixed AbxRateParams index mapping (colonized index 2) Updated InsituParams use correct index mapping: probs = c(0.9, 0, 0.1) Changed LABX mass/freq 1.0 0.9999 avoid logit(1.0) = infinity","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/final_parameter_comparison.html","id":"conclusion","dir":"","previous_headings":"","what":"Conclusion","title":"Parameter Initialization Comparison - Final Results","text":"parameter initialization issues resolved! R package now correctly initializes 22 comparable parameters match C++ implementation. remaining NaN issue MCMC execution separate problem unrelated parameter initialization.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/index.html","id":"bayesian-transmission-model","dir":"","previous_headings":"","what":"Bayesian Transmission Model","title":"Bayesian Transmission Models","text":"Provides estimates critical epidemiological parameters characterize spread bacterial pathogens healthcare settings. Parameter estimated: Transmission rate (frequency-dependent density-dependent mass action), importation probability, clearance rate (loss colonization per colonized person per unit time), surveillance test sensitivity, surveillance test specificity, effect covariate transmission (multiplier relation overall transmission rate). Khader K, Thomas , Stevens V, Visnovsky L, Nevers M, Toth D, Keegan LT, Jones M, Rubin M, Samore MH (2021). Association Contact Precautions Transmission Methicillin-Resistant Staphylococcus Aureus Veterans Affairs Hospitals. JAMA Netw Open. Khader K, Munoz-Price LS, Hanson R, Stevens V, Keegan LT, Thomas , Pezzin LE, Nattinger , Singh S, Samore MH (2021). Transmission Dynamics Clostridioides difficile 2 High-Acuity Hospital Units. Clin Infect Dis. Khader K, Thomas , Huskins WC, Stevens V, Keegan LT, Visnovsky L, Samore MH (2021). Effectiveness Contact Precautions Prevent Transmission Methicillin-Resistant Staphylococcus aureus Vancomycin-Resistant Enterococci Intensive Care Units. Clin Infect Dis. Khader K, Thomas , Jones M, Toth D, Stevens V, Samore MH (2019). Variation trends transmission dynamics Methicillin-resistant Staphylococcus aureus veterans affairs hospitals nursing homes. Epidemics. Thomas , Khader K, Redd , Leecaster M, Zhang Y, Jones M, Greene T, Samore M (2018). Extended models nosocomial infection: parameter estimation model selection. Math Med Biol, 35(suppl_1), 29-49. Khader K, Thomas , Huskins WC, Leecaster M, Zhang Y, Greene T, Redd , Samore MH (2017). dynamic transmission model evaluate effectiveness infection control strategies. Open Forum Infect Dis. Thomas , Redd , Khader K, Leecaster M, Greene T, Samore M (2015). Efficient parameter estimation models healthcare-associated pathogen transmission discrete continuous time. Math Med Biol, 32(1), 79-98.”","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Antibiotic Parameters — AbxParams","title":"Antibiotic Parameters — AbxParams","text":"Antibiotic Parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antibiotic Parameters — AbxParams","text":"","code":"AbxParams(onoff = FALSE, delay = 0, life = 1)"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Antibiotic Parameters — AbxParams","text":"onoff Anti-biotic used . delay delay using antibiotics. life life antibiotics.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Antibiotic Parameters — AbxParams","text":"","code":"AbxParams() #> $onoff #> [1] FALSE #>  #> $delay #> [1] 0 #>  #> $life #> [1] 1 #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxRateParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Antibiotic Administration Rate Parameters — AbxRateParams","title":"Antibiotic Administration Rate Parameters — AbxRateParams","text":"Antibiotic Administration Rate Parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxRateParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Antibiotic Administration Rate Parameters — AbxRateParams","text":"","code":"AbxRateParams(   uncolonized = Param(1, 0),   colonized = Param(1, 0),   latent = Param(0) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxRateParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Antibiotic Administration Rate Parameters — AbxRateParams","text":"uncolonized Rate antibiotic administration individual uncolonized. colonized Rate antibiotic administration individual colonized. latent Rate antibiotic administration individual latent.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxRateParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Antibiotic Administration Rate Parameters — AbxRateParams","text":"list parameters antibiotic administration.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/AbxRateParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Antibiotic Administration Rate Parameters — AbxRateParams","text":"","code":"AbxRateParams() #> $uncolonized #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $colonized #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $latent #> $init #> [1] 0 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ClearanceParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Clearance Parameters — ClearanceParams","title":"Clearance Parameters — ClearanceParams","text":"Clearance Parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ClearanceParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Clearance Parameters — ClearanceParams","text":"","code":"ClearanceParams(rate = Param(0.01), abx = Param(1, 0), ever_abx = Param(1, 0))"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ClearanceParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Clearance Parameters — ClearanceParams","text":"rate base rate clearance abx effect antibiotics clearance ever_abx effect ever taken antibiotics clearance","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ClearanceParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Clearance Parameters — ClearanceParams","text":"list parameters clearance.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ClearanceParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Clearance Parameters — ClearanceParams","text":"","code":"ClearanceParams() #> $rate #> $init #> [1] 0.01 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.01 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $ever_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/CodeToEvent.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert coded events to string events — CodeToEvent","title":"Convert coded events to string events — CodeToEvent","text":"Convert coded events string events","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/CodeToEvent.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert coded events to string events — CodeToEvent","text":"","code":"CodeToEvent(x)"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/CodeToEvent.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert coded events to string events — CodeToEvent","text":"x vector integers","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/CodeToEvent.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert coded events to string events — CodeToEvent","text":"vector strings","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/CodeToEvent.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert coded events to string events — CodeToEvent","text":"","code":"CodeToEvent(c(-1:19, 21:23, 31:33, -999)) #>  [1] \"nullevent\"        \"admission\"        \"negsurvtest\"      \"possurvtest\"      #>  [5] \"discharge\"        \"negclintest\"      \"posclintest\"      \"insitu\"           #>  [9] \"postest\"          \"negtest\"          \"abxdose\"          \"abxon\"            #> [13] \"abxoff\"           \"isolon\"           \"isoloff\"          \"admission0\"       #> [17] \"admission1\"       \"admission2\"       \"insitu0\"          \"insitu1\"          #> [21] \"insitu2\"          \"start\"            \"marker\"           \"stop\"             #> [25] \"acquisition\"      \"progression\"      \"clearance\"        \"EVENT_TYPE_ERROR\""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/EventToCode.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert string events to coded events — EventToCode","title":"Convert string events to coded events — EventToCode","text":"Convert string events coded events","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/EventToCode.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert string events to coded events — EventToCode","text":"","code":"EventToCode(x)"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/EventToCode.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert string events to coded events — EventToCode","text":"x vector strings","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/EventToCode.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert string events to coded events — EventToCode","text":"vector integers","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InUnitParams.html","id":null,"dir":"Reference","previous_headings":"","what":"In Unit Parameters — InUnitParams","title":"In Unit Parameters — InUnitParams","text":"Unit Parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InUnitParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"In Unit Parameters — InUnitParams","text":"","code":"InUnitParams(   acquisition = AcquisitionParams(),   progression = ProgressionParams(),   clearance = ClearanceParams() )  ABXInUnitParams(   acquisition = LinearAbxAcquisitionParams(),   progression = ProgressionParams(),   clearance = ClearanceParams() )"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InUnitParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"In Unit Parameters — InUnitParams","text":"acquisition Acquisition, rate acquisition disease moving latent state. progression Progression latent state colonized state. clearance Clearance colonized state uncolonized state.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InUnitParams.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"In Unit Parameters — InUnitParams","text":"ABXInUnitParams(): Unit Parameters Antibiotics.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InUnitParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"In Unit Parameters — InUnitParams","text":"","code":"InUnitParams(   acquisition = LinearAbxAcquisitionParams(),   progression = ProgressionParams(),   clearance = ClearanceParams() ) #> $acquisition #> $acquisition$base #> $init #> [1] 0.001 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.001 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$time #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$mass #> $init #> [1] 1 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$freq #> $init #> [1] 1 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$col_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$suss_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$suss_ever #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>  #> $progression #> $progression$rate #> $init #> [1] 0.01 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.01 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $progression$abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $progression$ever_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>  #> $clearance #> $clearance$rate #> $init #> [1] 0.01 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.01 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $clearance$abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $clearance$ever_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>  ABXInUnitParams(   acquisition = LinearAbxAcquisitionParams(),   progression = ProgressionParams(),   clearance = ClearanceParams() ) #> $acquisition #> $acquisition$base #> $init #> [1] 0.001 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.001 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$time #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$mass #> $init #> [1] 1 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$freq #> $init #> [1] 1 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$col_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$suss_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $acquisition$suss_ever #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>  #> $progression #> $progression$rate #> $init #> [1] 0.01 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.01 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $progression$abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $progression$ever_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>  #> $clearance #> $clearance$rate #> $init #> [1] 0.01 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.01 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $clearance$abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $clearance$ever_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InsituParams.html","id":null,"dir":"Reference","previous_headings":"","what":"InSitu Parameters — InsituParams","title":"InSitu Parameters — InsituParams","text":"InSitu Parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InsituParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"InSitu Parameters — InsituParams","text":"","code":"InsituParams(probs = NULL, priors = NULL, doit = NULL, nstates = NULL)"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InsituParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"InSitu Parameters — InsituParams","text":"probs probability individual state. priors prior probability individual state. doit flag indicating rate(s) updated MCMC. nstates number states (2 3). NULL, inferred probs length. 2-state models, uses uncolonized, latent=0, colonized. 3-state models, uses uncolonized, latent, colonized.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InsituParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"InSitu Parameters — InsituParams","text":"list parameters situ testing.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/InsituParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"InSitu Parameters — InsituParams","text":"","code":"InsituParams() #> $probs #> [1] 0.9 0.0 0.1 #>  #> $priors #> [1] 0.9 1.0 0.1 #>  #> $doit #> [1]  TRUE FALSE  TRUE #>  InsituParams(nstates = 2)  # [0.9, 0.0, 0.1] #> $probs #> [1] 0.9 0.0 0.1 #>  #> $priors #> [1] 0.9 1.0 0.1 #>  #> $doit #> [1]  TRUE FALSE  TRUE #>  InsituParams(nstates = 3)  # [0.98, 0.01, 0.01] #> $probs #> [1] 0.98 0.01 0.01 #>  #> $priors #> [1] 0.98 0.01 0.01 #>  #> $doit #> [1] TRUE TRUE TRUE #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LinearAbxAcquisitionParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Linear Antibiotic Acquisition Parameters — LinearAbxAcquisitionParams","title":"Linear Antibiotic Acquisition Parameters — LinearAbxAcquisitionParams","text":"model acquisition model given ","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LinearAbxAcquisitionParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Linear Antibiotic Acquisition Parameters — LinearAbxAcquisitionParams","text":"","code":"LinearAbxAcquisitionParams(   base = Param(0.001),   time = Param(1, 0),   mass = Param(1, 1),   freq = Param(1, 1),   col_abx = Param(1, 0),   suss_abx = Param(1, 0),   suss_ever = Param(1, 0) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LinearAbxAcquisitionParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Linear Antibiotic Acquisition Parameters — LinearAbxAcquisitionParams","text":"base base rate acquisition. time time effect acquisition. mass mass action effect acquisition. freq frequency effect acquisition. col_abx effect colonized antibiotics. suss_abx effect susceptible currently antibiotics. suss_ever effect susceptible ever antibiotics.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LinearAbxAcquisitionParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Linear Antibiotic Acquisition Parameters — LinearAbxAcquisitionParams","text":"list parameters acquisition.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LinearAbxAcquisitionParams.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Linear Antibiotic Acquisition Parameters — LinearAbxAcquisitionParams","text":"$$ P(\\mathrm{Acq(t)}) =     \\left[e^{\\beta_\\mathrm{time}(t-t_0)}\\right]\\\\ \\left\\{e^{\\beta_0}     \\left[         \\left(\\frac{\\beta_\\mathrm{freq}}{P(t)}+(1 - e^{\\beta_\\mathrm{freq}})\\right)         e^{\\beta_\\mathrm{mass}}\\left(             (N_c(t) - N_{ca}(t)) + e^{\\beta_\\mathrm{col\\_abx}}N_{ca}(t)             \\right)         + 1 - e^{\\beta_\\mathrm{mass}}         \\right]     \\right\\}\\\\ \\left[     N_S(t) - N_E(t) + e^{\\beta_\\mathrm{suss\\_ever}}\\left(\\left(E_i(t)-A_i(t)\\right) +A_i(t)e^{\\beta_\\mathrm{suss\\_abx}}\\right)     \\right] $$","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LinearAbxAcquisitionParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Linear Antibiotic Acquisition Parameters — LinearAbxAcquisitionParams","text":"","code":"LinearAbxAcquisitionParams() #> $base #> $init #> [1] 0.001 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.001 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $time #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $mass #> $init #> [1] 1 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $freq #> $init #> [1] 1 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $col_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $suss_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $suss_ever #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LogNormalModelParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Model Parameters for a Log Normal Model — LogNormalModelParams","title":"Model Parameters for a Log Normal Model — LogNormalModelParams","text":"Model Parameters Log Normal Model","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LogNormalModelParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Model Parameters for a Log Normal Model — LogNormalModelParams","text":"","code":"LogNormalModelParams(   modname,   nstates = 2L,   nmetro = 1L,   forward = TRUE,   cheat = FALSE,   Insitu = NULL,   SurveillanceTest = SurveillanceTestParams(),   ClinicalTest = ClinicalTestParams(),   OutOfUnitInfection = OutOfUnitInfectionParams(),   InUnit = InUnitParams(),   Abx = AbxParams(),   AbxRate = AbxRateParams() )  LinearAbxModel(..., InUnit = ABXInUnitParams())"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LogNormalModelParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Model Parameters for a Log Normal Model — LogNormalModelParams","text":"modname name model used. Usually specified specification functions. nstates number states model. nmetro number Metropolis-Hastings steps take outputs. forward TODO cheat TODO Insitu Situ Parameters SurveillanceTest Surveillance Testing Parameters ClinicalTest Clinical Testing Parameters OutOfUnitInfection Unit Infection Parameters InUnit Unit Parameters, list lists parameters acquisition, progression clearance disease. Abx Antibiotic Parameters AbxRate Antibiotic Rate Parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LogNormalModelParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Model Parameters for a Log Normal Model — LogNormalModelParams","text":"list parameters model.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LogNormalModelParams.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Model Parameters for a Log Normal Model — LogNormalModelParams","text":"LinearAbxModel(): Linear Antibiotic Model Alias","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/LogNormalModelParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Model Parameters for a Log Normal Model — LogNormalModelParams","text":"","code":"LogNormalModelParams(\"LogNormalModel\") #> Error in AcquisitionParams(): could not find function \"AcquisitionParams\""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/OutOfUnitInfectionParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Out of Unit Infection Parameters — OutOfUnitInfectionParams","title":"Out of Unit Infection Parameters — OutOfUnitInfectionParams","text":"Unit Infection Parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/OutOfUnitInfectionParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Out of Unit Infection Parameters — OutOfUnitInfectionParams","text":"","code":"OutOfUnitInfectionParams(   acquisition = Param(0.05),   clearance = Param(0.01),   progression = Param(0) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/OutOfUnitInfectionParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Out of Unit Infection Parameters — OutOfUnitInfectionParams","text":"acquisition Rate acquisition disease moving latent state. clearance Rate clearance disease moving uncolonized state. progression Rate progression disease moving colonized state.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/OutOfUnitInfectionParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Out of Unit Infection Parameters — OutOfUnitInfectionParams","text":"list parameters unit infection.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/OutOfUnitInfectionParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Out of Unit Infection Parameters — OutOfUnitInfectionParams","text":"","code":"OutOfUnitInfectionParams() #> $acquisition #> $init #> [1] 0.05 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.05 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $clearance #> $init #> [1] 0.01 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.01 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $progression #> $init #> [1] 0 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/Param.html","id":null,"dir":"Reference","previous_headings":"","what":"Construct a parameter with a prior, weight and an update flag. — Param","title":"Construct a parameter with a prior, weight and an update flag. — Param","text":"Construct parameter prior, weight update flag.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/Param.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Construct a parameter with a prior, weight and an update flag. — Param","text":"","code":"Param(   init,   weight = if_else(init == 0, 0, 1),   update = weight > 0,   prior = init )"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/Param.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Construct a parameter with a prior, weight and an update flag. — Param","text":"init initial value parameter. weight weight prior. update flag indicating parameter shouldbe updated MCMC. prior mean value prior distribution, may used weight fully determine prior parameters.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/Param.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Construct a parameter with a prior, weight and an update flag. — Param","text":"list following elements: init initial value parameter. weight weight prior. update flag indicating parameter shouldbe updated MCMC. prior mean value prior distribution, may used weight fully determine prior parameters.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/Param.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Construct a parameter with a prior, weight and an update flag. — Param","text":"","code":"# Fully specified parameter. Param(init = 0, weight = 1, update = TRUE, prior = 0.5) #> $init #> [1] 0 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.5 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" # Fixed parameter # Weight = 0 implies update=FALSE and prior is ignored. Param(0, 0) #> $init #> [1] 0 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" # Update parameter that starts at zero. Param(0, weight =1, update=TRUE) #> $init #> [1] 0 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" # Parameters specified at zero implies fixed. Param(0) #> $init #> [1] 0 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ParamWRate.html","id":null,"dir":"Reference","previous_headings":"","what":"Specify a random testing parameter with a rate. — ParamWRate","title":"Specify a random testing parameter with a rate. — ParamWRate","text":"Specify random testing parameter rate.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ParamWRate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Specify a random testing parameter with a rate. — ParamWRate","text":"","code":"ParamWRate(param = Param(), rate = Param())"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ParamWRate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Specify a random testing parameter with a rate. — ParamWRate","text":"param Values positive rate test. rate Values rate test.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ParamWRate.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Specify a random testing parameter with a rate. — ParamWRate","text":"list param rate.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ParamWRate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Specify a random testing parameter with a rate. — ParamWRate","text":"","code":"ParamWRate(Param(0.5, 0), rate = Param(1, 0)) #> $param #> $init #> [1] 0.5 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0.5 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $rate #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ProgressionParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Progression Parameters — ProgressionParams","title":"Progression Parameters — ProgressionParams","text":"Progression Parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ProgressionParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Progression Parameters — ProgressionParams","text":"","code":"ProgressionParams(   rate = Param(0.01),   abx = Param(1, 0),   ever_abx = Param(1, 0) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ProgressionParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Progression Parameters — ProgressionParams","text":"rate Base progression rate abx Effect current antibiotics progression ever_abx Effect ever taken antibiotics progression","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ProgressionParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Progression Parameters — ProgressionParams","text":"list parameters progression.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/ProgressionParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Progression Parameters — ProgressionParams","text":"","code":"ProgressionParams() #> $rate #> $init #> [1] 0.01 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.01 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $ever_abx #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/RandomTestParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Random Testing Parameter Set — RandomTestParams","title":"Random Testing Parameter Set — RandomTestParams","text":"Random Testing Parameter Set","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/RandomTestParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Random Testing Parameter Set — RandomTestParams","text":"","code":"RandomTestParams(   uncolonized = ParamWRate(Param(0.5, 0), Param(1, 0)),   colonized = ParamWRate(Param(0.5, 0), Param(1, 0)),   latent = ParamWRate(Param(0), Param(0)) )  ClinicalTestParams(   uncolonized = ParamWRate(Param(0.5, 0), Param(1, 0)),   colonized = ParamWRate(Param(0.5, 0), Param(1, 0)),   latent = ParamWRate(Param(0), Param(0)) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/RandomTestParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Random Testing Parameter Set — RandomTestParams","text":"uncolonized Testing individual uncolonized. colonized Testing individual colonized. latent Testing individual latent.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/RandomTestParams.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Random Testing Parameter Set — RandomTestParams","text":"list parameters random testing.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/RandomTestParams.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Random Testing Parameter Set — RandomTestParams","text":"ClinicalTestParams(): Clinical Test Parameters Alias","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/RandomTestParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Random Testing Parameter Set — RandomTestParams","text":"","code":"RandomTestParams() #> $uncolonized #> $uncolonized$param #> $init #> [1] 0.5 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0.5 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $uncolonized$rate #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>  #> $colonized #> $colonized$param #> $init #> [1] 0.5 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0.5 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $colonized$rate #> $init #> [1] 1 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 1 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>  #> $latent #> $latent$param #> $init #> [1] 0 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $latent$rate #> $init #> [1] 0 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/SurveillanceTestParams.html","id":null,"dir":"Reference","previous_headings":"","what":"Surveillance Test Parameters — SurveillanceTestParams","title":"Surveillance Test Parameters — SurveillanceTestParams","text":"Specify rates positive tests state model.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/SurveillanceTestParams.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Surveillance Test Parameters — SurveillanceTestParams","text":"","code":"SurveillanceTestParams(   colonized = Param(0, 0),   uncolonized = Param(0.8, 1),   latent = Param(0, 0) )"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/SurveillanceTestParams.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Surveillance Test Parameters — SurveillanceTestParams","text":"colonized Also known true positive rate two state model. uncolonized Also known false positive rate two state model. latent rate positive tests individual (optional) latent state.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/SurveillanceTestParams.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Surveillance Test Parameters — SurveillanceTestParams","text":"","code":"SurveillanceTestParams() #> $colonized #> $init #> [1] 0 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $uncolonized #> $init #> [1] 0.8 #>  #> $update #> [1] TRUE #>  #> $prior #> [1] 0.8 #>  #> $weight #> [1] 1 #>  #> attr(,\"class\") #> [1] \"Param\" #>  #> $latent #> $init #> [1] 0 #>  #> $update #> [1] FALSE #>  #> $prior #> [1] 0 #>  #> $weight #> [1] 0 #>  #> attr(,\"class\") #> [1] \"Param\" #>"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/newModelExport.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a new model object — newModelExport","title":"Create a new model object — newModelExport","text":"Creates initializes model object based provided parameters. allows direct creation inspection model objects without running MCMC. Returns list model parameter values verification.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/newModelExport.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a new model object — newModelExport","text":"","code":"newModelExport(modelParameters, verbose = FALSE)"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/newModelExport.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a new model object — newModelExport","text":"modelParameters List model parameters, including: modname Name model (e.g., \"LogNormalModel\", \"LinearAbxModel\", \"LinearAbxModel2\", \"MixedModel\") nstates Number states model nmetro Number metropolis steps forward Forward parameter cheat Cheat parameter verbose Print progress messages (default: false)","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/newModelExport.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a new model object — newModelExport","text":"list containing initialized model parameters: Insitu - situ parameters SurveillanceTest - Surveillance test parameters ClinicalTest - Clinical test parameters OutCol - unit colonization parameters InCol - unit colonization parameters Abx - Antibiotic parameters","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/runMCMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Run Bayesian Transmission MCMC — runMCMC","title":"Run Bayesian Transmission MCMC — runMCMC","text":"Run Bayesian Transmission MCMC","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/runMCMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Run Bayesian Transmission MCMC — runMCMC","text":"","code":"runMCMC(data, MCMCParameters, modelParameters, verbose = FALSE)"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/runMCMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Run Bayesian Transmission MCMC — runMCMC","text":"data Data frame columns, order: facility, unit, time, patient, event type. MCMCParameters List MCMC parameters. modelParameters List model parameters, see . verbose Print progress messages. modname Name model run. nstates Number states model.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/runMCMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Run Bayesian Transmission MCMC — runMCMC","text":"list following elements: Parameters MCMC chain model parameters LogLikelihood log likelihood model iteration MCMCParameters MCMC parameters used ModelParameters model parameters used ModelName name model nstates number states model waic1 WAIC1 estimate waic2 WAIC2 estimate optionally (MCMCParameters$outputfinal true) FinalModel final model state.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/simulated.data.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulated Transmission Data — simulated.data","title":"Simulated Transmission Data — simulated.data","text":"data set contains simulated transmission data hypothetical infectious disease. data set contains following columns:","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/simulated.data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulated Transmission Data — simulated.data","text":"","code":"simulated.data"},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/simulated.data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simulated Transmission Data — simulated.data","text":"object class data.frame 8360 rows 5 columns.","code":""},{"path":"https://epiforesite.github.io/bayesian-transmission/reference/simulated.data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulated Transmission Data — simulated.data","text":"facility: facility event occurred. unit: unit within facility event occurred. time: time event occurred. patient: patient involved event. type: type event.","code":""}]
